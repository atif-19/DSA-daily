/*
    ✅ Problem: Convert Sorted Array to Height-Balanced BST

    🔍 Approach: Divide & Conquer (Recursive)
    --------------------------------------------------------
    - Pick the middle element as root to ensure balance.
    - Recursively do the same for left and right halves.
    - The middle value becomes the root, left half forms the left subtree,
      and right half forms the right subtree.

    📌 Why it works:
    - Picking the middle ensures height-balance.
    - Every recursive step splits the array evenly, like a binary search.

    ⏱ Time Complexity: O(N)
        - We visit each element once to create a node.
    💾 Space Complexity: O(log N) on average (due to recursion stack)
*/

class Solution {
public:
    /**
     * Helper function to build BST from sorted array segment.
     *
     * @param nums  - reference to the sorted array
     * @param start - starting index of the current segment
     * @param end   - ending index of the current segment
     * @return Node* - pointer to the root of the subtree
     */
    Node* ArrayToBST(vector<int>& nums, int start, int end) {
        if (start <= end) {
            int mid = start + (end - start) / 2;

            // Middle element becomes the root
            Node* root = new Node(nums[mid]);

            // Recursively build right and left subtrees
            root->right = ArrayToBST(nums, mid + 1, end);
            root->left = ArrayToBST(nums, start, mid - 1);

            return root;
        }
        return NULL;
    }

    /**
     * Main function to convert sorted array to height-balanced BST.
     *
     * @param nums - sorted array
     * @return Node* - root of the balanced BST
     */
    Node* sortedArrayToBST(vector<int>& nums) {
        return ArrayToBST(nums, 0, nums.size() - 1);
    }
};
