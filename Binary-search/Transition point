/*
GFG: Transition Point
ðŸ”— https://www.geeksforgeeks.org/problems/transition-point-1587115620/

ðŸ§  Problem Statement:
Given a sorted array containing only 0s and 1s. The transition point is the index 
where '0' ends and '1' begins (i.e., first occurrence of 1). Your task is to find 
and return the index of the **first 1** in the array. If there is no 1 present, return -1.

The array is guaranteed to be **non-decreasing** (all 0s come before 1s).

ðŸ§ª Example 1:
Input: N = 5, arr[] = {0, 0, 0, 1, 1}
Output: 3

ðŸ§ª Example 2:
Input: N = 4, arr[] = {0, 0, 0, 0}
Output: -1

ðŸ”’ Constraints:
- 1 â‰¤ N â‰¤ 500000
- 0 â‰¤ arr[i] â‰¤ 1

ðŸ’¡ Expected Time Complexity: O(log N)
ðŸ’¡ Expected Auxiliary Space: O(1)

ðŸŽ¯ Approach:
- Use binary search to efficiently locate the first occurrence of 1.
- If the first element is 1, return 0.
- If the last element is 0, return -1 (no 1s present).
*/

class Solution {
public:
    int transitionPoint(vector<int>& arr) {
        // Handle edge cases
        if (arr[0] == 1)
            return 0; // First element is 1
        if (arr[arr.size() - 1] == 0)
            return -1; // All elements are 0

        int start = 1, end = arr.size() - 1, mid;
        int ans = -1; // Default to -1 in case 1 is not found

        // Binary search for first occurrence of 1
        while (start <= end) {
            mid = start + (end - start) / 2;

            if (arr[mid] == 1) {
                ans = mid;      // Save current index
                end = mid - 1;  // Look for earlier 1
            } else {
                start = mid + 1; // Move right
            }
        }

        return ans;
    }
};
