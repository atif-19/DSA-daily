// 🔍 Problem: Find the peak index in a "mountain" array
// A mountain array has elements strictly increasing, then strictly decreasing.
// You need to return the index of the peak element (maximum value).
//
// Example: arr = [1, 3, 5, 4, 2] ➤ Output: 2 (because 5 is the peak)

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int start = 0, end = arr.size() - 1, mid;
        int ans = -1;  // Optional, to store the peak index

        // 🔁 Binary Search for the peak
        while (start <= end) {
            mid = start + (end - start) / 2;

            // ✅ Flashcard: What is the property of peak in mountain array?
            // It's the index where arr[mid] > arr[mid + 1] AND arr[mid] > arr[mid - 1]

            if (arr[mid] > arr[mid + 1]) {
                // 🔼 We are on the decreasing side of mountain → possible peak
                ans = mid;
                end = mid - 1;
            } else {
                // 🔽 We are on the increasing side → move right
                start = mid + 1;
            }
        }

        // ✅ Flashcard: Why is `ans` guaranteed to be set?
        // Because it's a valid mountain array → there **will be a peak** by definition

        return ans;
    }
};
