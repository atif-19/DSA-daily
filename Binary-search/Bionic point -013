/*
🔍 GFG: Maximum Value in a Bitonic Array
🧠 Problem:
Given an array `arr[]` which is first increasing and then decreasing (bitonic),
find the **maximum element**.

📘 Example:
Input: arr = [1, 3, 8, 12, 4, 2]  
Output: 12

💡 Approach:
- Use **binary search**.
- Check `arr[mid] > arr[mid+1]`:
  → If true, it means we’re on the decreasing slope. So the current mid might be the peak.
  → Move left (end = mid - 1), but store current mid as a potential answer.
- Else:
  → We’re on the increasing slope. Move right (start = mid + 1)

⚠️ Edge Case:
- Last element is treated as a potential max (e.g., in strictly increasing array)

⏱️ Time Complexity: O(log n)  
🧠 Space Complexity: O(1)
*/

class Solution {
public:
    int findMaximum(vector<int>& arr) {
        int start = 0;
        int end = arr.size() - 2; // Stop at second last index to avoid out-of-bound on arr[mid+1]
        int ans = arr[arr.size() - 1]; // Initialize with last element in case it's the max

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (arr[mid] > arr[mid + 1]) {
                // On decreasing slope → possible peak
                ans = arr[mid];
                end = mid - 1;
            } else {
                // On increasing slope → go right
                start = mid + 1;
            }
        }

        return ans;
    }
};
