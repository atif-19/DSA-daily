/*
LeetCode 33. Search in Rotated Sorted Array
🔗 https://leetcode.com/problems/search-in-rotated-sorted-array/

🧠 Problem Statement:
There is an integer array nums sorted in ascending order (with distinct values),
which is rotated at an unknown pivot index k (e.g. [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given the array nums and an integer target.

Your task: Return the index of target if it is in nums, otherwise return -1.
You must write an algorithm with O(log n) runtime complexity.

🧪 Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

🧪 Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

🧪 Example 3:
Input: nums = [1], target = 0
Output: -1

🔒 Constraints:
- 1 <= nums.length <= 5000
- -10^4 <= nums[i] <= 10^4
- All values of nums are unique
- nums is guaranteed to be rotated at least once
- -10^4 <= target <= 10^4
*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0, end = nums.size() - 1, mid;

        // Binary Search in Rotated Sorted Array
        while (start <= end) {
            mid = start + (end - start) / 2;

            // 🎯 Target found
            if (nums[mid] == target)
                return mid;

            // 🧠 Left half is sorted
            if (nums[mid] >= nums[start]) {
                if (target >= nums[start] && target < nums[mid])
                    end = mid - 1;  // 🔍 Target in left half
                else
                    start = mid + 1;  // ➡️ Move right
            }
            // 🧠 Right half is sorted
            else {
                if (target > nums[mid] && target <= nums[end])
                    start = mid + 1;  // 🔍 Target in right half
                else
                    end = mid - 1;  // ⬅️ Move left
            }
        }

        // 🚫 Target not found
        return -1;
    }
};
