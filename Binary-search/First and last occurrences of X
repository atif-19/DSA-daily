class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        // Initialize answer vector with default values [-1, -1]
        // If target is not found, this will be returned
        vector<int> ans(2, -1);

        // Step 1: Binary Search for the First (Leftmost) Occurrence
        int start = 0, end = nums.size() - 1, mid;

        while (start <= end) {
            mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                // Found target, but check further left
                ans[0] = mid;
                end = mid - 1;
            } else if (nums[mid] > target) {
                // Target is on the left
                end = mid - 1;
            } else {
                // Target is on the right
                start = mid + 1;
            }
        }

        // If first occurrence not found, target doesn’t exist
        if (ans[0] == -1) return ans;

        // Step 2: Binary Search for the Last (Rightmost) Occurrence
        start = ans[0];               // No need to start from 0 again
        end = nums.size() - 1;

        while (start <= end) {
            mid = start + (end - start) / 2;

            if (nums[mid] == target) {
                // Found target, check further right
                ans[1] = mid;
                start = mid + 1;
            } else {
                // Target is on the left
                end = mid - 1;
            }
        }

        return ans;
    }
};


/*
───────────────────────────────────────────────
🧠 TL;DR for Future Me:

🔍 Goal:
    - Return the first and last positions of a target value in a sorted array.

🔁 How it works:
    - First binary search finds the leftmost (first) occurrence.
    - Second binary search finds the rightmost (last) occurrence.
    - If target doesn't exist, returns [-1, -1].

⏱️ Time Complexity:
    - O(log n) for both searches (logarithmic, efficient)

🗃️ Space Complexity:
    - O(1) extra space (just using result vector)

📌 Edge Cases:
    - Empty array → returns [-1, -1]
    - Target not present → returns [-1, -1]
    - Target occurs once → both indices will be same
───────────────────────────────────────────────
*/
