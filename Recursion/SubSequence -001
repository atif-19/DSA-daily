// Subsets (Power Set) using Recursion
// LeetCode Problem: https://leetcode.com/problems/subsets/
// Author: Atif
// -------------------------------------------------------------
// Problem Statement:
// Given an integer array nums of unique elements, return all
// possible subsets (the power set).
//
// Example:
// Input: nums = [1,2,3]
// Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
//
// -------------------------------------------------------------
// Approach:
// - At each index, we have 2 choices:
//   1. Do not include the current element in the subset.
//   2. Include the current element in the subset.
// - Recursively explore both choices.
// - When we reach the end of the array (base case),
//   add the current subset to the answer.
//
// Time Complexity: O(2^n * n)
//   - There are 2^n subsets.
//   - Copying each subset into the result may take up to O(n).
//
// Space Complexity:
//   - Recursion depth: O(n)
//   - Output storage: O(2^n * n) for all subsets
// -------------------------------------------------------------

class Solution {
public:
    // Helper function to recursively generate subsets
    void Sub(vector<int> nums,                // input array
             vector<vector<int>>& ans,        // stores all subsets
             vector<int> temp,                // current subset
             int index) {                     // current index in nums

        // Base case: if index crosses array size, store current subset
        if (index >= nums.size()) {
            ans.push_back(temp);
            return;
        }

        // Choice 1: Do NOT take nums[index]
        Sub(nums, ans, temp, index + 1);

        // Choice 2: Take nums[index]
        temp.push_back(nums[index]);
        Sub(nums, ans, temp, index + 1);
    }

    // Main function to return all subsets of nums
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> ans;  // stores final answer
        vector<int> temp;         // temporary subset
        int index = 0;            // start index
        Sub(nums, ans, temp, index);
        return ans;
    }
};
