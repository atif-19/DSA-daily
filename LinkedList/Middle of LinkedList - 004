/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

/**
 * @brief Find the middle node of a singly linked list.
 * 
 * Given the head of a singly linked list, this function returns
 * the middle node of the list. If there are two middle nodes, 
 * it returns the second one.
 * 
 * Approach:
 * ---------
 * Uses the **two-pointer technique**:
 *  - `slow` pointer moves one step at a time.
 *  - `fast` pointer moves two steps at a time.
 * 
 * When `fast` reaches the end of the list, `slow` will be at the middle.
 * 
 * Time Complexity:  O(N) — single traversal of the list  
 * Space Complexity: O(1) — constant extra space
 * 
 * Example:
 * ---------
 * Input:  1 -> 2 -> 3 -> 4 -> 5
 * Output: Node with value 3
 * 
 * Input:  1 -> 2 -> 3 -> 4 -> 5 -> 6
 * Output: Node with value 4
 */

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* fast = head;
        ListNode* slow = head;

        // Move fast by 2 steps and slow by 1 step
        // When fast reaches end, slow will be at the middle
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Return the middle node
        return slow;
    }
};
