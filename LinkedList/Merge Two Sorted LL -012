/*
class Node {
 public:
    int data;
    Node *next;

    Node(int x) {
        data = x;
        next = NULL;
    }
};
*/

class Solution {
  public:
    // Function to merge two sorted linked lists into one sorted list.
    Node* sortedMerge(Node* head1, Node* head2) {

        // Create a dummy node to act as the start of the merged list.
        // This simplifies handling of edge cases.
        Node* dummy = new Node(0);

        // Tail pointer to build the new list.
        Node* tail = dummy;

        // Traverse both lists while both have elements.
        while (head1 && head2) {

            // If current node of first list is smaller or equal,
            // link it to the merged list.
            if (head1->data <= head2->data) {

                // Store next node before rewiring.
                Node* fut = head1->next;

                // Rewire tail to point to this node.
                tail->next = head1;

                // Move tail forward.
                tail = head1;

                // Advance the pointer in list1.
                head1 = fut;
            } 
            else {
                // Similar process if head2 has the smaller value.
                Node* fut = head2->next;
                tail->next = head2;
                tail = head2;
                head2 = fut;
            }
        }

        // Attach the remaining nodes from whichever list is not empty.
        if (head1 == NULL)
            tail->next = head2;
        else
            tail->next = head1;

        // Move head to point to the real start of the merged list.
        Node* mergedHead = dummy->next;

        // Delete the dummy node (cleanup).
        delete dummy;

        // Return the merged sorted linked list.
        return mergedHead;
    }
};
