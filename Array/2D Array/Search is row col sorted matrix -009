/*
Question:
Given a matrix of size N x M, where each row is sorted in ascending order from left to right
and each column is sorted in ascending order from top to bottom, determine if a target value
exists in the matrix.

Example:
Input:
matrix = [
  [1, 4, 7, 11],
  [2, 5, 8, 12],
  [3, 6, 9, 16],
  [10, 13, 14, 17]
]
target = 5
Output: true

Approach:
Start from the top-right corner.
If the current element equals the target → return true.
If the current element is less than the target → move down to the next row.
If the current element is greater than the target → move left to the previous column.
Repeat until you find the element or go out of bounds.

Time Complexity: O(N + M)  
Space Complexity: O(1)  
*/

// User function template for C++
class Solution {
public:
    bool matSearch(vector<vector<int>> &matrix, int target) {
        int row = 0, col = matrix[0].size() - 1, element;
        while (row < matrix.size() && col >= 0) {  // fixed col condition
            element = matrix[row][col];
            if (element == target)
                return true;
            else if (element < target)
                row++;
            else
                col--;
        }
        return false;
    }
};
