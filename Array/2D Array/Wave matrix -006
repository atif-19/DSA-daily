/**
 * @brief Print the elements of a matrix in a wave (zig-zag) form column-wise.
 *
 * Problem:
 * --------
 * Given a 2D matrix of size nRows x mCols, print its elements in a 
 * column-wise wave pattern:
 * - Even-indexed columns (0, 2, 4, ...) → top to bottom
 * - Odd-indexed columns (1, 3, 5, ...)  → bottom to top
 *
 * Example:
 * --------
 * Input:
 *      nRows = 3, mCols = 4
 *      arr =
 *      [[1,  2,  3,  4],
 *       [5,  6,  7,  8],
 *       [9, 10, 11, 12]]
 *
 * Output:
 *      [1, 5, 9, 10, 6, 2, 3, 7, 11, 12, 8, 4]
 *
 * Approach:
 * ---------
 * - Loop through each column.
 * - If the column index is even, traverse from top to bottom.
 * - If the column index is odd, traverse from bottom to top.
 * - Append elements to the output vector accordingly.
 *
 * Time Complexity:  O(nRows × mCols) → Each element is visited once.
 * Space Complexity: O(1) extra space (excluding the output vector).
 */

#include <bits/stdc++.h> 
using namespace std;

vector<int> wavePrint(vector<vector<int>> arr, int nRows, int mCols) {
    vector<int> ans;

    for (int i = 0; i < mCols; i++) {
        if (i % 2 == 0) {
            // Traverse column top → bottom
            for (int j = 0; j < nRows; j++)
                ans.push_back(arr[j][i]);
        } else {
            // Traverse column bottom → top
            for (int j = nRows - 1; j >= 0; j--)
                ans.push_back(arr[j][i]);
        }
    }
    return ans;
}
