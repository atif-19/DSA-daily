/*
Problem: Search a 2D Matrix (LeetCode 74)

You are given an m x n integer matrix 'matrix' with the following properties:
1. Each row is sorted in ascending order from left to right.
2. The first integer of each row is greater than the last integer of the previous row.

Given an integer 'target', return true if 'target' is in the matrix, or false otherwise.

Example:
---------
Input:
matrix = [
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
], target = 3

Output: true

Constraints:
------------
- m == matrix.length
- n == matrix[i].length
- 1 <= m, n <= 100
- -10^4 <= matrix[i][j], target <= 10^4
*/


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        /*
         Step 1: Binary Search to find the correct row
         ------------------------------------------------
         - Each row's first element is greater than the last element of the previous row.
         - This means we can binary search over the first elements of each row to find
           which row could possibly contain 'target'.
         - Row index is stored in 'Row'. If target is smaller than all first elements, Row stays -1.
        */
        int start = 0, end = matrix.size() - 1;
        int mid, Row = -1;

        while (start <= end) {
            mid = start + (end - start) / 2;

            if (matrix[mid][0] == target)  // Found target in the first column
                return true;
            else if (matrix[mid][0] < target) {
                // Target could be in this row, move search to later rows
                Row = mid;
                start = mid + 1;
            } else {
                // Target must be in an earlier row
                end = mid - 1;
            }
        }

        // If Row is -1, target is smaller than the smallest element in the matrix
        if (Row == -1)
            return false;

        /*
         Step 2: Binary Search within the found row
         -------------------------------------------
         - Now that we know 'Row', we search in that row using a normal binary search.
        */
        start = 0, end = matrix[0].size() - 1;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (matrix[Row][mid] == target) {
                return true;
            } else if (target > matrix[Row][mid]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        // Target not found
        return false;
    }
};

/*
Time Complexity:
----------------
- Binary search for row: O(log m)
- Binary search within row: O(log n)
Total: O(log m + log n)

Space Complexity:
-----------------
- O(1) extra space
*/
