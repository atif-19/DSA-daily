// C++ program to search for a target value in a 2D matrix using Binary Search
// Time Complexity: O(log(m * n)) where m = number of rows, n = number of columns
// Space Complexity: O(1)

class Solution {
public:
    /**
     * @brief Searches for a target value in a 2D matrix.
     * 
     * The matrix has the following properties:
     *  - Integers in each row are sorted from left to right.
     *  - The first integer of each row is greater than the last integer of the previous row.
     * 
     * The approach treats the matrix as a single sorted 1D array and applies binary search.
     * 
     * @param matrix Reference to the 2D vector (matrix) of integers.
     * @param target The integer value to search for.
     * @return true if the target is found in the matrix, false otherwise.
     */
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int start = 0;
        int end = (matrix.size() * matrix[0].size()) - 1;
        int mid;

        while (start <= end) {
            mid = start + (end - start) / 2;

            // Map 1D mid index to 2D coordinates (row, col)
            int row = mid / matrix[0].size();
            int col = mid % matrix[0].size();

            if (matrix[row][col] == target) {
                return true; // Target found
            }
            else if (matrix[row][col] < target) {
                start = mid + 1; // Search right half
            }
            else {
                end = mid - 1; // Search left half
            }
        }
        return false; // Target not found
    }
};


Space Complexity:
-----------------
- O(1) extra space
*/
