/*
🔁 Problem: Rearrange Array Elements by Sign (Alternate +ve and -ve)
📘 Statement:
   Given an array `arr[]`, rearrange the elements such that:
   - The **positive and negative numbers** appear **alternately**.
   - The **order of appearance** of positive and negative numbers should be **preserved**.
   - Extra elements (if any) should be placed at the end.

🧠 Approach:
   - Separate the array into two arrays: `pos[]` and `neg[]`.
   - Then merge them back into the original array in alternating fashion.
   - If one array is exhausted, append the remaining elements.

🕒 Time Complexity: O(n)
🧠 Space Complexity: O(n) (because of extra pos[] and neg[] arrays)
*/

class Solution {
  public:
    void rearrange(vector<int> &arr) {
        vector<int> pos;
        vector<int> neg;

        // Separate positive and negative numbers
        for(int i = 0; i < arr.size(); i++) {
            if(arr[i] >= 0)
                pos.push_back(arr[i]);
            else
                neg.push_back(arr[i]);
        }

        int i = 0, j = 0, iter = 0;

        // Alternate placement
        while(i < pos.size() && j < neg.size()) {
            if(iter % 2 == 0) {
                arr[iter++] = pos[i++];
            } else {
                arr[iter++] = neg[j++];
            }
        }

        // Place remaining positives
        while(i < pos.size()) {
            arr[iter++] = pos[i++];
        }

        // Place remaining negatives
        while(j < neg.size()) {
            arr[iter++] = neg[j++];
        }
    }
};
