/*
    Problem: Majority Element
    Given an array nums of size n, return the majority element.
    The majority element is the element that appears more than ⌊n / 2⌋ times.
    You may assume that the majority element always exists in the array.

    Approach: Boyer–Moore Majority Vote Algorithm
    - Maintain a candidate and a counter.
    - Iterate through the array:
        - If counter is 0, set current element as candidate.
        - If element equals candidate, increment counter.
        - Else decrement counter.
    - The final candidate is the majority element.

    Time Complexity: O(n)  
    Space Complexity: O(1)
*/

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 0, candidate = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (count == 0) {
                candidate = nums[i];
                count = 1;
            }
            else if (nums[i] == candidate) {
                count++;
            }
            else {
                count--;
            }
        }
        return candidate;
    }
};
