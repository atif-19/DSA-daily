// ✅ Problem: Bracket Numbers
// Given a string containing multiple pairs of parentheses, 
// assign a unique number to each opening and closing bracket pair 
// based on their order of appearance.
//
// Example:
// Input:  "(aa(bdc))p(dee)"
// Output:  1 2 2 1 3 3
// Explanation:
// '(' → 1, '(' → 2, ')' → 2, ')' → 1, '(' → 3, ')' → 3
//
// ----------------------------------------------------------
// 🧠 Approach:
// - Use a stack to keep track of the numbers corresponding to each '(' bracket.
// - Each time we encounter '(', we push a new count value onto the stack 
//   and add it to the answer list.
// - Each time we encounter ')', we take the top of the stack (the number 
//   of its matching '(') and add that to the answer list, then pop it.
// - The stack ensures correct pairing of opening and closing brackets.
//
// ----------------------------------------------------------
// ⏱️ Time Complexity: O(n)
// We traverse the string once, and all stack operations are O(1).
//
// 💾 Space Complexity: O(n)
// Stack and output vector both may store up to n elements in the worst case.

class Solution{
  public:
    vector<int> bracketNumbers(string str) {
        stack<int> st;     // Stack to hold bracket numbers
        vector<int> ans;   // Result vector
        int count = 1;     // Counter for assigning bracket numbers

        for (int i = 0; i < str.size(); i++) {
            if (str[i] == '(') {
                st.push(count);      // Assign new number to opening bracket
                ans.push_back(count);
                count++;
            }
            else if (str[i] == ')') {
                ans.push_back(st.top());  // Use number of matching '('
                st.pop();
            }
        }
        return ans;
    }
};
